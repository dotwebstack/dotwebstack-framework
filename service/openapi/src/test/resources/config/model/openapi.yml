openapi: 3.0.2

info:
  title: test API
  version: 3.0.0
  description: |
    This is an API for brewery data.
    It tells you all about breweries and their beers.
    And much much more.

components:
  schemas:
    Object1:
      type: object
      required:
        - o1_prop1
        - o1_prop2
        - o1_prop5
        - o1_array1
      properties:
        o1_prop1:
          type: string
          x-dws-expr: "template_content"
        o1_prop2:
          type: number
          nullable: true
        o1_prop3:
          type: integer
        o1_prop4:
          type: boolean
        o1_prop5:
          type: string
          x-dws-expr:
            value: "`${field.o1_prop2}`"
            fallback: null
        o1_array1:
          type: array
          items:
            $ref: '#/components/schemas/Object2'
        o1_object1:
          $ref: '#/components/schemas/Object2'
    Object2:
      type: object
      default: {"o2_prop1":"v1"}
      required:
        - o2_prop1
      properties:
        o2_prop1:
          type: string
        o2_prop2:
          type: string
    Object3:
      type: object
      required:
        - o3_prop2
      properties:
        o3_prop1:
          type: string
        o3_prop2:
          type: array
          items:
            type: string
    Object4:
      type: object
      allOf:
        - $ref: 'components/schemas/Object3'
        - type: object
          required:
            - o3_prop1
          properties:
            o3_prop1:
              type: string
    Object5:
      type: object
      x-dws-type: 'customType'
      oneOf:
        - $ref: 'components/schemas/Object3'
        - $ref: 'components/schemas/Object4'

    Object7:
      type: object
      nullable: true
      required:
        - child
      properties:
        child:
          $ref: '#/components/schemas/Object7'

    Object8:
      type: object
      nullable: true
      required:
        - children
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/Object8'

    Object12:
      type: object
      required:
        - o12_prop2
      properties:
        o12_prop1:
          type: string
        o12_prop2:
          type: array
          x-dws-default: ['default']
          items:
            type: string

    Object13:
      type: object
      allOf:
        - $ref: 'components/schemas/Object2'
        - $ref: 'components/schemas/Object14'

    Object14:
      type: object
      required:
        - o14_prop1
        - o14_prop2
      properties:
        o14_prop1:
          type: string
        o14_prop2:
          $ref: 'components/schemas/Object4'

    Object15:
      type: object
      required:
        - o15_prop1
        - o15_prop2
        - o15_prop3
      properties:
        o15_prop1:
          type: string
        o15_prop2:
          type: array
          items:
            type: string
        o15_prop3:
          $ref: 'components/schemas/Object3'

    Object17:
      type: object
      x-dws-envelope: true
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/Object18'

    Object18:
      type: object
      required:
        - o18_prop1
        - o18_prop2
      properties:
        o18_prop1:
          type: array
          items:
            $ref: '#/components/schemas/Object15'
        o18_prop2:
          type: string

    Object19:
      type: object
      required:
        - o19_prop1
      properties:
        o19_prop4:
          type: string

    Object21:
      type: object
      x-dws-envelope: true
      required:
        - objects
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/Object21b'

    Object21b:
      type: object
      required:
        - o21_prop1
        - o21_prop2
        - o21_prop3
      properties:
        o21_prop1:
          type: string
        o21_prop2:
          type: number
          nullable: true
        o21_prop3:
          type: integer

  headers:
    HeaderRef:
      schema:
        type: string
        x-dws-expr: '`ref`'



paths:
  /query1:
    get:
      x-dws-query: query1
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object1'
    post:
      x-dws-query:
        field: query1
        keys:
          id: $body.argument1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                argument1:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object1'
  /query2:
    get:
      x-dws-query:
        field: query2
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object2'
  /query3/{query3_param1}:
    get:
      x-dws-query:
        field: query3
      parameters:
        - name: query3_param1
          in: path
          required: true
          schema:
            type: array
            default: ['default1', 'default2']
            items:
              type: string
              enum: ['default1', 'default2']
        - name: query3_param2
          in: header
          schema:
            type: string
            default: "query3_param2_default"
        - name: query3_param3
          in: header
          schema:
            type: object
            properties:
              p1:
                type: string
              p2:
                type: string
            default: {"p1":"v1", "p2":"v2"}
        - name: query3_param4
          in: header
          schema:
            $ref: '#/components/schemas/Object2'
        - name: expand
          x-dws-type: expand
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object2'
        400:
          description: bad request
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                  title:
                    type: string
                  status:
                    type: integer
                    format: int32
                  detail:
                    type: string
                  instance:
                    type: string
                    format: uri
        404:
          description: not found
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                  title:
                    type: string
                    x-dws-expr: "`Not Found OAS`"
                  status:
                    type: integer
                    format: int32
                  detail:
                    type: string
                  instance:
                    type: string
                    format: uri
        406:
          description: not acceptable
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  acceptable:
                    type: array
                    x-dws-expr: "acceptableMimeTypes"
                  customparam:
                    type: string
                    x-dws-expr: "`foo`"
  /query4:
    get:
      x-dws-query:
        field: query4
        filters:
          o2_prop1:
            type: PropFilter
            fields:
              name:
                not:
                  in: $body.o3_prop1
              name2:
                eq: $body.o3_prop2!
                or:
                  x-dws-expr: "'expression'"
                neq: $body.o3_prop3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                object3:
                  $ref: '#/components/schemas/Object3'
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object2'
  /query5:
    get:
      x-dws-query:
        field: query5
        parameters:
          - name: someJexlParameter
            valueExpr: someJexlExpression
      responses:
        200:
          description: OK
          content:
            text/html:
              x-dws-template: brewery.html
              schema:
                $ref: '#/components/schemas/Object4'
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object4'
  /query6:
    get:
      x-dws-query: query6
      parameters:
        - name: query6_param1
          x-dws-type: specialtype
          in: query
          schema:
            type: string
            default: "query6_param1"
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object5'
          headers:
            X-Response-Header:
              schema:
                type: string
                x-dws-expr: '`value`'
            X-Response-Default:
              schema:
                default: 'defaultValue'
                type: string
                x-dws-expr: args.nonExistent
            X-Response-Header-Ref:
              $ref: '#/components/headers/HeaderRef'
  /query7:
    get:
      x-dws-query: query7
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object7'
  /query8:
    get:
      x-dws-query: query8
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object8'
  /query9:
    get:
      x-dws-query:
        field: query9
        requiredFields:
          - o2_prop1
          - field1
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object2'
  /query10:
    get:
      responses:
        303:
          description: "300 response"
          headers:
            Location:
              schema:
                type: string
                x-dws-expr: '`/foo/bar`'
  /query11:
    post:
      x-dws-query: query11
      requestBody:
        x-dws-type: specialtype
        content:
          application/json:
            schema:
              type: object
              properties:
                argument1:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object1'
  /query12:
    get:
      x-dws-query:
        field: query12
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object12'
  /query13:
    get:
      x-dws-operation: false
      responses:
        303:
          description: "300 response"
          headers:
            Location:
              schema:
                type: string
                x-dws-expr: '`http://any/url`'
  /query14:
    get:
      x-dws-query: query14
      responses:
        303:
          description: "300 response"
  /query15:
    get:
      x-dws-query: query15
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object13'
  /query16/{query16_param1}:
    get:
      x-dws-query:
        field: query16
        keys:
          id: $path.query16_param1
          o15_prop3.id: $path.query16_param2
      parameters:
        - name: query16_param1
          in: path
          schema:
            type: integer
        - name: query16_param2
          in: path
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object15'
  /query17:
    get:
      x-dws-query:
        field: query17
        paging:
          pageSize: $query.pageSize
          page: $query.page
      parameters:
        - name: pageSize
          in: query
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object17'
  /query18/{query18_param1}:
    get:
      x-dws-query:
        field: query18
        keys:
          id: $path.query18_param1
        selectionSet: |
          {
            o18_prop1
            o18_prop2
            o18_prop3 {
              o18_1_prop1
            }
          }
      responses:
        200:
          description: OK
          content:
            text/turtle: {}
  /query19/{query19_param1}:
    get:
      x-dws-query:
        field: query19
        keys:
          id: $path.query19_param1
        selectionSet: |
          {
            o19_prop1
            o19_prop2
            o19_prop3 {
              o19_1_prop1
            }
          }
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object19'
  /query20:
    get:
      x-dws-query:
        field: query20
        selectionSet: selectionSetTest
      responses:
        200:
          description: OK
          content:
            text/turtle: {}
  /query21:
    get:
      x-dws-query:
        field: query21
        paging:
          pageSize: $query.pageSize
          page: $query.page
        filters:
          query21:
            type: PropFilter
            fields:
              o21_prop1:
                eq: $query.o21_prop1
      parameters:
        - name: o21_prop1
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Object21'
