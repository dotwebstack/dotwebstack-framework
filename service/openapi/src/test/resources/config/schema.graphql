schema {
  query: Query
}

type Query {
  breweryCollection(filter: BreweryFilter): [Brewery!]!
  breweryPageableCollection(first: Int = 10, offset: Int = 0): BreweryConnection!
  brewery(identifier: ID!): Brewery
  breweryCollectionMaybe: [Brewery!]
}

input BreweryFilter {
  name: LikeFilter
  identifier: StringFilter
}

input StringFilter {
 in: [String]!
}

input LikeFilter {
  like: String
}

type Brewery {
  identifier: ID!
  name: String!
  aliases: [String!]!
  status: String
  postalAddress: Address
  visitAddresses: [Address!]!
  numberOfEmployees: Int
  salesAreas: Geometry
  beers: [Beer]!
  beersMaybe: [Beer]
  hiddenField: String!
  secretField: Float
}

type BreweryConnection {
  nodes: [Brewery!]!
}

type Address {
  street: String!
  postalCode: String!
  location: Geometry
}

type Geometry {
  asGeoJSON: String!
}

type Beer {
  identifier: ID!
}
