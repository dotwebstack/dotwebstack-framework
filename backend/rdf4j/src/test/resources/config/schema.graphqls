schema {
  query: Query
}

type Query {
  brewery(identifier: ID!): Brewery!
    @sparql(repository: "local", subject: "https://github.com/dotwebstack/beer/id/brewery/${identifier}")

  breweries(
    name: String 
      @sparqlFilter(field: "name"),
    foundedAfter: String 
      @sparqlFilter(field: "founded", operator: ">"),
    foundedBefore: String 
      @sparqlFilter(field: "founded", operator: "<")
  ): [Brewery!]!
    @sparql(repository: "local")

  breweriesWithInputObject(
    input: QueryParameters
  ) : [Brewery!]!
    @sparql(repository: "local")

  beer(identifier: ID!): Beer!
    @sparql(repository: "local", subject: "https://github.com/dotwebstack/beer/id/beer/${identifier}")

}

input QueryParameters {
  nestedInput: NestedInput
}

input NestedInput {
  nestedNestedInput: NestedNestedInput
  foundedAfter: String 
    @sparqlFilter(field: "founded", operator: ">")
}

input NestedNestedInput {
  name: [String] 
    @sparqlFilter(field: "name", operator: "=")

}

type Brewery {
  identifier: ID!
  name: String!
  founded: DateTime!
  address: Address
}

type Address {
  postalCode: String!
}

type Beer {
  identifier: ID!
  name: String!
  brewery: String!
  beerTypes: [String]!
  beerTypesRaw: [BeerType!]
}

type BeerType {
  name: String
}

