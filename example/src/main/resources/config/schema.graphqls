schema {
  query: Query
}

type Query {
  brewery(identifier: ID! @constraint(pattern: "[0-9]+")): Brewery
    @sparql(
      repository: "local",
      subject: "https://github.com/dotwebstack/beer/id/brewery/${identifier}")

  breweries(sort: [SortField!] = [{ field: "name", order: ASC }],
            page: Int = 1 @constraint(min: 1), pageSize: Int = 10 @constraint(oneOfInt: [10, 20, 50]),
            sinceAfter: String @filter(field: "founded", operator: ">"),
            sinceBefore: String @filter(field: "founded", operator: "<")
            name: [String] @filter(field: "name")): [Brewery!]!
    @sparql(
      repository: "local"
      limit: "pageSize"
      offset: "(page - 1) * pageSize"
      orderBy: "sort"
    )

  breweries_sort_nested(sort: [SortField!] = [{ field: "address.postalCode", order: ASC }]):[Brewery!]
   @sparql(
      repository: "local"
      orderBy: "sort"
   )

  breweries_paging_input(input: PageQueryInput): [Brewery!]!
    @sparql(
      repository: "local"
      limit: "input.pageSize"
      offset: "(input.page - 1) * input.pageSize"
    )

  breweries_filter_input(input: FilterQueryInput): [Brewery!]!
   @sparql(
     repository: "local",
     limit: "input.pageSize",
     offset: "(input.page - 1) * input.pageSize"
   )

  breweries_sort_input(input: SortQueryInput): [Brewery!]!
    @sparql(
      repository: "local"
      orderBy: "input.sort"
    )

  beers(sort: [SortField!] =[{field: "name", order: ASC}]): [Beer!]!
    @sparql(
      repository: "local"
      orderBy: "sort"
    )
}

type Brewery {
  identifier: ID!
  name: String!
  founded: Int!
    @transform(expr: "founded.getYear()")
  openinghours: String
  owners: [String]
  url: String!
    @transform(expr: "url.getLocalName()")
  address: Address!
  postalCode: String!
  beers: [String]
}

type Address {
  postalCode: String!
  streetAddress: String!
}

type Beer {
  identifier: ID!
  name: String!
  brewery: String!
  beerTypes: [String]!
  ingredients: [Ingredient!]
  supplements: [Supplement!]
}

type Ingredient {
  name: String
}

type Supplement {
  name: String
}

input SortQueryInput {
  sort: [SortField!] = [{ field: "name", order: ASC }]
}

input PageQueryInput {
  page: Int = 1 @constraint(min: 1)
  pageSize: Int = 10 @constraint(oneOfInt: [10, 20, 50])
}

input FilterQueryInput {
  page: Int = 1
  sinceBefore: String
    @filter(field: "founded", operator: "<=")
  sinceAfter: String
    @filter(field: "founded", operator: ">=")
}
