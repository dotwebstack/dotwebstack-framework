schema {
  query: Query
}

directive @key(
  field: String
) on ARGUMENT_DEFINITION

type Query {
  brewery(identifier: ID! @key): Brewery!
  brewery_with_subject(subject: String! @key) : Brewery!

  breweries(
    name: String
    url: String
    foundedAfter: String @key(field: "founded")
    foundedBefore: String @key(field: "founded")
    withAddressSubject: String
    sort: [SortField!] = [{ field: "name", order: ASC }],
    beerCount: Int
    withBeer: String
  ): [Brewery!]!

  breweriesWithInputObject(
    input: QueryParameters
  ) : [Brewery!]!

  beer(identifier: ID!): Beer!
}

input QueryParameters {
  nestedInput: NestedInput
}

input NestedInput {
  nestedNestedInput: NestedNestedInput
  foundedAfter: String
}

input NestedNestedInput {
  name: [String]
}

type Brewery {
  identifier: ID!
  name: String!
  subject: String!
  number: Int
  localName: String
  founded: Date!
  owners(sort: [SortField!] = [{order: ASC}]): [String!]
  address(subject: String @filter): Address
  beerNames: [String!]
  beers(brewery: [SortField!] = [{order: ASC}], ingredient: [String!] , supplement: [String!]): [Beer!]
  beerCount: Int!
  hasBeers: Boolean!
  url: String
}

type Address {
  postalCode: String!
}

type Beer {
  identifier: ID!
  name: String
  brewery: String!
  beerTypes: [String]!
  beerTypesRaw: [BeerType!]
  ingredients(sort: [SortField!] = [{field: "name", order: DESC}], ingredientName: [String!] ): [Ingredient!]
  supplements(supplementName: [String!]): [Supplement!]
}

type Ingredient {
  name: String
}

type Supplement {
  name: String
}

type BeerType {
  name: String
}

