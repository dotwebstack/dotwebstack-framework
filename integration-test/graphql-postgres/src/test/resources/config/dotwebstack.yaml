spatial:
  srid:
    28992:
      dimensions: 2
      scale: 4
      bboxColumnSuffix: _bbox
    7415:
      dimensions: 3
      scale: 4
      bboxColumnSuffix: _bbox
      equivalent: 28992
    9067:
      dimensions: 2
      scale: 9
      columnSuffix: _etrs89
    7931:
      dimensions: 3
      scale: 9
      columnSuffix: _etrs89
      equivalent: 9067

queries:
  rooms:
    type: Room
    list: true
  beers:
    type: Beer
    list: true
  beer:
    type: Beer
    keys:
      - identifier_beer
  breweries:
    type: Brewery
    list: true
  brewery:
    type: Brewery
    keys:
      - identifier_brewery
  breweryBatch:
    type: Brewery
    keys:
      - identifier_brewery
    batch: true
  breweryBatchList:
    type: Brewery
    keys:
      - identifier_brewery
    list: true
    batch: true
  breweryCity:
    type: Brewery
    keys:
      - identifier_brewery
      - city: postalAddress.city
  ingredients:
    type: Ingredient
    list: true
    sortableBy:
      name:
        - field: name
          direction: ASC
  ingredient:
    type: Ingredient
    keys:
      - identifier_ingredient

subscriptions:
  beersSubscription:
    type: Beer

objectTypes:
  Room:
    table: db.room
    filters:
      geometry: {}
    fields:
      record_id:
        type: ID
      name:
        type: String
      brewery:
        type: Brewery
        joinColumns:
          - name: brewery
            referencedField: identifier_brewery
      geometry:
        type: Geometry

  Beer:
    table: db.beer
    implements:
      - BaseObject
    fields:
      identifier_beer:
        type: ID
      abv:
        type: Float
      soldPerYear:
        type: Int
      brewery:
        type: Brewery
        joinColumns:
          - name: brewery
            referencedField: identifier_brewery
      ingredients:
        type: Ingredient
        list: true
        joinTable:
          name: db.beer_ingredient
          joinColumns:
            - name: beer_identifier
              referencedField: identifier_beer
          inverseJoinColumns:
            - name: ingredient_code
              referencedField: code
      ingredient:
        type: Ingredient
        nullable: true
        joinTable:
          name: db.beer_ingredient
          joinColumns:
            - name: beer_identifier
              referencedField: identifier_beer
          inverseJoinColumns:
            - name: ingredient_code
              referencedField: code
      ingredientAgg:
        aggregationOf: Ingredient
        joinTable:
          name: db.beer_ingredient
          joinColumns:
            - name: beer_identifier
              referencedField: identifier_beer
          inverseJoinColumns:
            - name: ingredient_code
              referencedField: code
      taste:
        type: String
        list: true
        enum:
          type: db.taste
          values: [ "MEATY", "FRUITY", "SMOKY", "SPICY", "WATERY" ]
      since:
        type: Date
      lastBrewed:
        type: DateTime
    filters:
      name: {}
      sinceDate:
        field: since
      lastBrewed: {}
      brewery: {}
      taste:
        field: taste
    sortableBy:
      name:
        - field: name
          direction: ASC
      nameDesc:
        - field: name
          direction: DESC
      breweryCity:
        - field: brewery.visitAddress.city
          direction: ASC

  Ingredient:
    table: db.ingredient
    implements:
      - BaseObject
    fields:
      identifier_ingredient:
        type: ID
      weight:
        type: Float
      code:
        type: String
        visible: false
      partOf:
        type: Beer
        list: true
        nullable: true
        joinTable:
          name: db.beer_ingredient
          joinColumns:
            - name: ingredient_code
              referencedField: code
          inverseJoinColumns:
            - name: beer_identifier
              referencedField: identifier_beer
      partOfWithMappedBy:
        type: Beer
        list: true
        nullable: true
        mappedBy: ingredients

  Brewery:
    table: db.brewery
    implements:
      - BaseObject
    fields:
      identifier_brewery:
        type: ID
      shortName:
        valueFetcher: shortname-valuefetcher
        type: String
      status:
        type: String
        enum:
          type: db.brewery_status
          values: [ "active", "inactive"]
      geometry:
        type: Geometry
      postalAddress:
        type: Address
        joinColumns:
          - name: postal_address
            referencedColumn: identifier_address
      visitAddress:
        type: Address
        nullable: true
        joinColumns:
          - name: visit_address
            referencedColumn: identifier_address
      rooms:
        type: Room
        list: true
        nullable: true
        mappedBy: brewery
      beers:
        type: Beer
        list: true
        nullable: true
        mappedBy: brewery
      beer:
        type: Beer
        nullable: true
        mappedBy: brewery
      beerAgg:
        aggregationOf: Beer
        mappedBy: brewery
      history:
        type: History
        nullable: true
        presenceColumn: history__age
      multinational:
        type: Boolean
        nullable: true
      created:
        type: DateTime
        nullable: true
        visible: false
    filters:
      name:
        field: name
        caseSensitive: false
      status:
        field: status
      multinational:
        field: multinational
      geometry: {}
      history: {}
      beers: {}
      postalAddress: {}
      visitAddress: {}
      created: {}
    sortableBy:
      name:
        - field: name
          direction: ASC
      breweryAge:
        - field: history.age
          direction: DESC

  Address:
    table: db.address
    fields:
      identifier_address:
        type: ID
      street:
        type: String
      city:
        type: String
    filters:
      city: { }
      street: { }
      streetPartial:
        field: street
        type: partial

  History:
    fields:
      age:
        type: Int
      history:
        type: String
    filters:
      age: {}

interfaces:
  BaseObject:
    fields:
      name:
        type: String

enumerations:
  Taste:
    values: [MEATY, FRUITY, SMOKY, SPICY, WATERY]
