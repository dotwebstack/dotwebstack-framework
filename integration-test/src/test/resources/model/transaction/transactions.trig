GRAPH dbeerpedia:Theatre {

  # Transaction: replace resource from graph
  dbeerpedia:InsertConcept a elmo:Transaction;
    elmo:sequentialFlow (
      dbeerpedia:PreUpdateStep
      #dbeerpedia:AssertNoDuplicated
      dbeerpedia:AssertIfNotExists
      dbeerpedia:AssertIfExists
      dbeerpedia:ValidationStep
      dbeerpedia:PersistenceStep
      dbeerpedia:PostUpdateStep
    );
  .

  dbeerpedia:ValidationStep a elmo:ValidationStep;
    rdfs:label "validation to check concept";
    elmo:conformsTo dbeerpedia:ConceptShapeGraph;
  .

  dbeerpedia:PreUpdateStep a elmo:UpdateStep;
  	rdfs:label "Pre update";
    elmo:backend elmo:TransactionRepository;
    elmo:query """
      INSERT DATA
        {
        <http://dbeerpedia.org#davo> <http://www.w3.org/2000/01/rdf-schema#label>
        \"Davo brouwerij Deventer\"
        };
    """
  .
  dbeerpedia:AssertIfNotExists a elmo:AssertionStep;
   	rdfs:label "Davo should exists";
  	elmo:assert """
  	  ASK  { ?s <http://www.w3.org/2000/01/rdf-schema#label> \"Davo brouwerij Deventer\"
  	  }
  	"""
  .
  dbeerpedia:AssertIfExists a elmo:AssertionStep;
  	rdfs:label "Brouwtoren should not exists";
  	elmo:assertNot """
  	  ASK  { ?s <http://www.w3.org/2000/01/rdf-schema#label> \"Brouwtoren\"
  	  }
  	"""
  .
  dbeerpedia:AssertNoDuplicated a elmo:AssertionStep;
  	rdfs:label "The concept already exists";
  	elmo:assertNot '''
  	PREFIX dbo: <http://dbpedia.org/ontology/>
  	PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  	PREFIX dbeerpedia: <http://dbeerpedia.org#>
  	SELECT ?city ?label (lang(?label) as ?lang)
  	WHERE {
       ?city a dbo:City
          SERVICE dbeerpedia:Backend {
            ?city rdfs:label ?label
        }
        SERVICE dbeerpedia:MyBackend {
            ?city rdfs:label ?label
        }
  		}
  	'''
  .
  dbeerpedia:PersistenceStep a elmo:PersistenceStep;
  	rdfs:label "Persist into all concepts graph";
    elmo:persistenceStrategy elmo-sp:InsertIntoGraph;
    elmo:backend dbeerpedia:Backend;
    elmo:targetGraph <http://dotwebstack.org/all-concepts>;
  .
  dbeerpedia:PostUpdateStep a elmo:UpdateStep;
  	rdfs:label "Post update";
    elmo:backend dbeerpedia:Backend;
    elmo:query """
      INSERT DATA
        {
        <http://dbeerpedia.org#davo> <http://www.w3.org/2000/01/rdf-schema#label>
        \"Davo brouwerij Deventer\"
        };
    """
  .
  # Transaction: (test reading list with blank nodes)
  dbeerpedia:InsertConcept2 a elmo:Transaction;
    elmo:sequentialFlow (
    [ a elmo:UpdateStep;
      elmo:backend elmo:TransactionRepository;
      elmo:query """
        INSERT DATA
        {
        <http://dbeerpedia.org#davo> <http://www.w3.org/2000/01/rdf-schema#label>
        \"Davo brouwerij Deventer\"
        };
      """
    ]
    [ a elmo:PersistenceStep;
      elmo:persistenceStrategy elmo-sp:InsertIntoGraph;
      elmo:backend dbeerpedia:Backend;
      elmo:targetGraph <http://dotwebstack.org/all-concepts>;
    ])
  .
  # Transaction: (test reading list with blank nodes)
  dbeerpedia:InsertConcept3 a elmo:Transaction;
    elmo:sequentialFlow (
    [ a elmo:UpdateStep;
      elmo:backend elmo:TransactionRepository;
      elmo:query """
        INSERT DATA
        {
          GRAPH <http://dotwebstack.org/all-concepts> {
            <http://dbeerpedia.org#Brewskovitch> <http://www.w3.org/2000/01/rdf-schema#label>
            \"Stanislaus Brewskovitch Stadsbrouwerij\"
          }
          GRAPH <http://dotwebstack.org/brouwerijen-uit-enschede> {
            <http://dbeerpedia.org#eanske> <http://www.w3.org/2000/01/rdf-schema#label>
            \"Brouwerij Eanske\"
          }
        };
      """
    ]
    [ a elmo:PersistenceStep;
      elmo:persistenceStrategy elmo-sp:InsertIntoGraphs;
      elmo:backend dbeerpedia:Backend;
    ])
  .
  dbeerpedia:RmlMapping a rr:TriplesMap ;
      rml:logicalSource [
        rml:source [
          a carml:Stream ;
          carml:streamName "stream-A"
        ] ;
        rml:referenceFormulation ql:JSONPath ;
        rml:iterator "$" ;
      ] ;

      rr:subjectMap [
        rr:template "http://dbeerpedia.org/{name}" ;
      ] ;

      rr:predicateObjectMap [
        rr:predicate ex:ownsCar ;
        rr:objectMap [
          carml:multiReference "beers" ;
          rr:datatype xsd:string ;
        ] ;
      ] ;
   .
}

#Concept Shape graph
GRAPH dbeerpedia:ConceptShapeGraph {
	# Constraint: a concept should have a prefLabel
	dbeerpedia:ConceptShape a sh:NodeShape;
		sh:targetClass skos:Concept;
		sh:property [
			sh:path skos:prefLabel;
			sh:minCount 1;
		];
	.
}
