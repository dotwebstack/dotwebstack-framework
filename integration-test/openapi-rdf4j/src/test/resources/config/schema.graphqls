schema {
  query: Query
}

type Query {
  brewery(identifier: ID! @constraint(pattern: "[0-9]+")): Brewery
    @sparql(
      repository: "local",
      subject: "https://github.com/dotwebstack/beer/id/brewery/${identifier}")

  brewerySparql(identifier: ID! @constraint(pattern: "[0-9]+")
  ): SparqlQueryResult!
    @sparql(
      repository: "local",
      queryRef: "breweries-sparql"
      subject: "https://github.com/dotwebstack/beer/id/brewery/${identifier}"
  )

  breweryModel(identifier: ID! @constraint(pattern: "[0-9]+"),
    iri: IRI
  ): Model
  @sparql(
    repository: "local",
    queryRef: "breweries-model"
  )

  brewery_with_subject(subject: String! @filter) : Brewery
    @sparql(repository: "local")

  breweries(sort: [SortField!] = [{ field: "name", order: ASC }] @sort,
            page: Int = 1 @constraint(min: 1), pageSize: Int = 10 @constraint(oneOfInt: [1, 2, 5, 10]),
            foundedAfter: Date @filter(field: "founded", operator: ">"),
            foundedBefore: Date @filter(field: "founded", operator: "<"),
            name: [String] @filter(field: "name"),
            searchName: [String] @filter(field: "name", operator:"like"),
            searchPostalCode: [String] @filter(field: "postalCode", operator: "contains"),
            withAddressSubject: String @filter(field: "address.subject")): [Brewery!]!
    @sparql(
      repository: "local"
      limit: "pageSize"
      offset: "(page - 1) * pageSize"
    )
}

type Brewery {
  identifier: ID!
  subject: IRI! @resource
  name: String!
  founded: DateTime
  address: Address
  postalCode: String
  beers(name: [SortField!] = [{order: ASC}] @sort, ingredient: String @filter(field: "ingredients.name")): [Beer!]
  hasBeers: Boolean @aggregate(type: COUNT) @transform(expr: "hasBeers > 0")
}

type Address {
  subject: IRI! @resource
  postalCode: String
  streetAddress: String!
}

type Beer {
  identifier: ID!
  name: String!
  ingredients(name: [String] @filter(field: "name")): [Ingredient!]
}

type Ingredient {
  identifier: ID
  name: String
}
